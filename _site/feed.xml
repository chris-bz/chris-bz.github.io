<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Blachewicz</title>
    <description>Tips and tricks for keyboard-driven Linux navigation, operations, cross-program integrations etc.</description>
    <link>http://www.chrisbl.com/</link>
    <atom:link href="http://www.chrisbl.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Sep 2020 09:52:02 +0200</pubDate>
    <lastBuildDate>Tue, 22 Sep 2020 09:52:02 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Converting date to ISO 8601 in Python</title>
        <description>&lt;h2 id=&quot;why-use-iso-8601&quot;&gt;Why use ISO 8601?&lt;/h2&gt;

&lt;p&gt;No matter which area a programmer works in, he most likely has to deal with dates in some way. Even writing a basic application log benefits from stamping information with dates, so we know when a potential problem ocurred etc.&lt;/p&gt;

&lt;p&gt;Unfortunately, they are a tricky subject. It’s often an extra that just needs to work, but doesn’t. And it can fail for many reasons.&lt;/p&gt;

&lt;p&gt;One of the main ones is incompatibility between different date formats. Sometimes, the month is a word, sometimes it’s a number. The standard for order of year, month and day is different in one country than it is in another.&lt;/p&gt;

&lt;p&gt;When month is a number and it’s 12 or lower, we can confuse it with day number and not be able to verify which is which. One month has 30 days, another has 31. April has 28 days… but only 3 years out of 4. All that needs to be taken into consideration when dealing with dates.&lt;/p&gt;

&lt;p&gt;To alleviate the pain from some of those problems, ISO 8601 was introduced. It is an international standard, an exact way of writing date and time so that there is no confusion.&lt;/p&gt;

&lt;p&gt;Having all dates in one format is important for one’s own projects. When they are always written the same, there is no need to convert anything, they are compatible with each other for future use by default.&lt;/p&gt;

&lt;p&gt;It is also important externally. When someone else needs to process them, there is no need to verify what is what, to format string to make it compatible with another company’s own internal formatting standard.&lt;/p&gt;

&lt;p&gt;Choosing ISO 8601 is also very convenient for the programmer. Most frameworks, modules etc. that deal with dates use it as the default standard and force the user to first convert the input data string to ISO 8601 before further processing. Such is the case with SQLite, Pandas, Django and many more.&lt;/p&gt;

&lt;p&gt;It is always the best practice to try to stick to one data formatting standard whenever possible. And since ISO 8601 is the most popular standard for date formatting in the world, it is most convenient to stick to it. It makes our dates most compatible with other dates “out there”, saving us from many potential headaches in the future.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-needs-does-this-converter-address&quot;&gt;What needs does this converter address?&lt;/h2&gt;

&lt;p&gt;Unfortunately, there is no one correct way to write a converter. It all depends on which context it needs to be used, and based on that, the optimal behavior can be different.&lt;/p&gt;

&lt;p&gt;For example, in some cases it is crucial that failure to convert produces an error and instantly stops the program from running to not pollute the data with pseudo-dates, or empty strings which have to be addressed quickly not to break something else.&lt;/p&gt;

&lt;p&gt;Another time, it is mandatory that the service continues working and error is handled silently and gracefully. There is no right or wrong way to write it, it’s all context-dependent.&lt;/p&gt;

&lt;p&gt;The converter function below behaves like so:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;deals just with date, not date and time&lt;/li&gt;
  &lt;li&gt;does not require hint parameters to know the format, it tries to guess which is which&lt;/li&gt;
  &lt;li&gt;it returns None on failure, does not break whatever’s running it&lt;/li&gt;
  &lt;li&gt;when month and day are both numbers, it assumes that month is always the digit on the left side, and day on the right&lt;/li&gt;
  &lt;li&gt;the year is always a four-digit number&lt;/li&gt;
  &lt;li&gt;the month can be either a number, or a word&lt;/li&gt;
  &lt;li&gt;a day can be either a one-digit number or a two-digit number&lt;/li&gt;
  &lt;li&gt;there can be no day, but month and year both have to be present&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure that a converter you need meets all the criteria above, or that you have fixes for when it doesn’t.&lt;/p&gt;

&lt;p&gt;Below I break apart the code. If you just want the entire thing to copy-paste, click &lt;a href=&quot;#full_code&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;code-breakdown&quot;&gt;Code breakdown&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;def toiso8601(date):&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The converter is best written as function, convenient to keep in separate python helper file and imported as needed. It takes date, ie. a string hopefully containing all the ingredients we need.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;month_to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;months_full&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;january&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;february&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;02&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;march&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;03&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;april&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;04&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;may&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;05&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;june&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;06&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;july&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;07&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;august&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;08&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;september&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;09&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;october&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;10&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;november&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;11&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;december&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;jan&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;feb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;02&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;mar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;03&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;apr&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;04&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;may&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;05&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;jun&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;06&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;jul&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;07&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;aug&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;08&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;sep&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;09&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;oct&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;10&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;nov&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;11&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;dec&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months_full&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ERROR: not a valid date. month word unknown&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, we write a sub-function that converts month, written as word, to a number (still written as string). This sequence exists twice in our code, so there is no point repeating the whole thing. Instead, we make a function of it and call it when needed.&lt;/p&gt;

&lt;p&gt;There are two types of month words popular in writing dates in English. The first one is full words, the second the first 3 letters of each word. In ISO 8601, month is a two-digit number. And so we have to convert.&lt;/p&gt;

&lt;p&gt;For that, we have two dictionaries, one for each type. The keys are the month-words, the values are numbers to which they convert.&lt;/p&gt;

&lt;p&gt;If it feels right, you can also create one dictionary and test for full name against full key name, or for first three letters of the parsed string against the first three letters of each dictionary key, saving us from the need to create the second dictionary. It reduces redundancy in our code, but makes the script perform worse.&lt;/p&gt;

&lt;p&gt;Notice that the numbers are in quotes. They are strings, first because ‘03’ is not a number understandable by Python, second because the entire process is taking string input and outputting another string. There is no reason to switch to any other data type at any point, as sooner or later it would have to be converted back into a string.&lt;/p&gt;

&lt;p&gt;If conversion fails (ie. the word doesn’t match month name in either dictionary), we set month_final to None. At the end of our function, we make a condition that year, month and day all have to be set and only then do we generate and return the final date. Otherwise, we’d let some gibberish word posing as month pass through to the final string.&lt;/p&gt;

&lt;p&gt;There is no ISO 8601 date without year, and setting it to some default is risky business. You could, for example, decide to go with ‘0000’. If such year has no reasons to exist in our data (let’s say we have a movie database), setting it to such would conform to the ISO 8601 standard while giving us a valuable information that that particular piece of data is missing.&lt;/p&gt;

&lt;p&gt;In some datasets, the data has to exist, even if our database tool of choice allows setting datetime fields to be empty. This would force us to use a solution like that.&lt;/p&gt;

&lt;p&gt;Since for my usecase it’s not a problem, if a four-digit number indicating year is not found, the function informs about the problem, returns None and that’s the end of it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ERROR: not a valid date. year missing&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last line of that chunk of code extracts the string from a regex object. If we had it done earlier (not knowing if regex found anything), pointing to a sometimes non-existing item would throw an error. That behavior we do not want, as it would force us to use it inside a ‘try’ clause.&lt;/p&gt;

&lt;p&gt;After setting up a year variable, we now need to delete this number from the date string and only seek in that new variable. Otherwise, it would extract sub-numbers from it as potential month and day numbers.
	date_no_year = re.sub(year, ‘’, date)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_no_year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;[A-Za-z]{3,}&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_no_year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, we proceed to look inside that newly cut string for word indicating month and as many sets of digits as we can find. The combination of these two findings are the base for our final assessments on what data we have and how to process it.&lt;/p&gt;

&lt;p&gt;For that, we use regex module’s ‘findall’ and ‘search’ functions. Both month and day can be single, or double-width string (hence ‘?’ by the second one, meaning “0 or 1 of it”). Month words only contain letters and all the words in both dictionaries are of 3+ length. ‘{3,}’ means “minimum 3, maximum unspecifiedO. So equal to or higher than 3”. Just like with Python slices when we skip one side.&lt;/p&gt;

&lt;p&gt;Being specific here is important. If someone would surprise our converter with a peculiar date, like 1969x05x20, our function would still work and omit ‘x’ separators, as they are only of length 1. Not demanding three or more letters in a word, those x-es would be added needlessly as separate ‘month or day’ items and cause the script to fail to fullfill its duty and return None.&lt;/p&gt;

&lt;p&gt;Now we get into different scenarios.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First is the case of month being a word (as in containing letters, not in regex sense, where digits also qualify as word characters) and month_day search returning only one object.&lt;/p&gt;

&lt;p&gt;If we have year, some word and some digit, it is safe to assume that that word is month and the digit is day. So we set up both variables, giving us a first potential complete set of year, month and day variables.&lt;/p&gt;

&lt;p&gt;The last two lines are important. ISO 8601 does not accept single-digit numbers, neither for date nor for time. If the input format is ‘Sep 1, 1995’, the day needs ‘0’ in front of 1.&lt;/p&gt;

&lt;p&gt;Because strings are iterable in Python, it is very easy to check for its length and if it’s 1 (which means the number is most likely 1-9 with no 0 in front), we add it and the day variable is complete.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first alternative check is for no word indicating month and just single digit found. In most cases, when we only have year and single number, that single number is month. Nobody writes year and day of a month that is not specified.&lt;/p&gt;

&lt;p&gt;In rare cases, this extra number means day of year. This converter is not equipped to deal with such scenario and if it is indeed what you have to deal with, you’d have to use Python’s datetime module to convert it to a final date. It is easily achievable once you know this primary tool for dealing with dates in Python.&lt;/p&gt;

&lt;p&gt;In many scenarios, when the day is not found, we might want the whole date to be invalid. For my use, I still need the date, which is only used for getting approximate guesses to another object with another date (the ones with smallest timedelta between them being paired), so few days off are much less hurtful than not having date at all.&lt;/p&gt;

&lt;p&gt;If you want to not return any date if the day is missing, it is easy to change in this function. Because final date generation will fail if year, month or day is not set, all you have to do is change “day = ‘01’” to “day = None” in two places.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next is a straightforward case, where we have word for month, but no extra number that would represent day. Here, again we blindly set the day to first of the month.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lack of a word representing month and two sets of digits indicates both month and day being numbers. Like mentioned in the function summary, this part assumes month number being to the left of day number. You can reverse this order by setting month to month_day[1] and day to month_day[0].&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ERROR: not a valid date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we write what to do if all our previous conditions failed. If we got to it, this means that either of these is true:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;word representing month was not found and regex was not able to fetch any numbers from string, leaving us with no data to work with&lt;/li&gt;
  &lt;li&gt;besides year, there were more than two other numbers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Three digits make it impossible to assess which one is month and which one is day. Usually, it means that the string we got is not date at all, or date with some unfortunate extra luggage.&lt;/p&gt;

&lt;p&gt;One way or the other, under this circumstance it is best to not play wild guesses and instead call it quits. Print will inform us about the problem in terminal window. Setting year to None will make the final condition fail, as it tests for the presence of year, month and day. ‘None’ is faulty in Python, it indicates failure, and so the condition is not met.&lt;/p&gt;

&lt;p&gt;The final piece of our code checks for presence of all objects and constructs a string from it.&lt;/p&gt;

&lt;p&gt;The last return is silent and applies only when that condition is not met. Every function in Python returns None, if not specified elsewhere. Here, we want to return date, but only if we have all the ingredients. If not, there are no final return instructions, which means the function will return ‘None’.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;final_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;{year}-{month}-{day}&#39;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final_date&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In other words, the final lines could be more redundantly written this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;final_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;{year}-{month}-{day}&#39;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final_date&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First return reached instantly ends the function, and so it reaches ‘return None’ only if year, word and month are not set to anything truthy.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
And here is the entire code:&lt;a id=&quot;full_code&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;	&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toiso8601&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;month_to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;months_full&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;january&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;february&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;02&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;march&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;03&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;april&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;04&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;may&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;05&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;june&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;06&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;july&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;07&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;august&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;08&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;september&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;09&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;october&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;10&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;november&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;11&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;december&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;jan&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;feb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;02&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;mar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;03&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;apr&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;04&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;may&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;05&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;jun&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;06&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;jul&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;07&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;aug&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;08&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;sep&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;09&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;oct&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;10&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;nov&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;11&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;dec&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months_full&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_as_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ERROR: not a valid date. month word unknown&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_final&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ERROR: not a valid date. year missing&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;date_no_year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_no_year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;[A-Za-z]{3,}&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_no_year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01&#39;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ERROR: not a valid date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;final_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;{year}-{month}-{day}&#39;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final_date&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 07 Sep 2020 11:53:01 +0200</pubDate>
        <link>http://www.chrisbl.com/python/2020/09/07/converting-date-to-iso8601-in-python.html</link>
        <guid isPermaLink="true">http://www.chrisbl.com/python/2020/09/07/converting-date-to-iso8601-in-python.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>CMUS music player review</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/cmus-music-player-review/cmus1.png&quot; alt=&quot;CMUS library view&quot; /&gt;
version reviewed: 2.7.0&lt;br /&gt;
installed on: Linux Mint 19&lt;/p&gt;

&lt;p&gt;CMUS is probably the most popular terminal-based music player for Unix operating systems. The competition is almost non-existent, and even from that small pool, some applications do not look to meet the same needs CMUS addresses (some basically play a single specified track and that’s it).&lt;/p&gt;

&lt;p&gt;Despite being very satisfied with my previous player, DeadBeef, I was eager to look for something that could be fully controlled from within by keyboard, and thus free up various system-wide (and Ranger-wide) playback shortcuts with one application shortcut, and give all the commands from inside the program inside the terminal window. Which, of course, has its advantages over graphical interface.&lt;/p&gt;

&lt;p&gt;DeadBeef already comes chock-full of keyboard shortcuts, including specialized ones that you’ll struggle to find in most music players, like remove currently played file from disk, or look it up on last.fm. Spoiled for choice, I was coming with high expectations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;views&quot;&gt;Views&lt;/h2&gt;

&lt;p&gt;By pressing numbers 1-7, we switch between different tabs, which in CMUS are called ‘views’. First one is tree view (aka. library), second is sorted library, third is playlist, fourth is queue. We get three options for three different scenarios, depending on how long do we plan on keeping the file on the list:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;library is for long-term  additions that is supposed to reflect all the music we have on disk (or at least the part of it which we want to have quick access to)&lt;/li&gt;
  &lt;li&gt;playlist is for ‘current’ use&lt;/li&gt;
  &lt;li&gt;queue is a list that takes priority - whatever is added there is going to be played immediately after the currently played track and only after&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Majority of users will spend majority of time either in library view, or playlist view, depending of course on which they find more convenient.&lt;/p&gt;

&lt;p&gt;The librarians will find separate playback queue extremely useful. Since in library, an order of tracks is predetermined on loading, it is very convenient to press whatever key we have bound to the win-add-q command to add it to music queue. This way, we use library to play entire albums and in between we add to queue whatever music we scavenge outside the current album’s directory.&lt;/p&gt;

&lt;p&gt;On the other hand, using queue for playlistians is not as useful. In playlist, we set whatever order of tracks played ourselves. And so queue view doesn’t address the natural limitations of library view. We end up splitting our playlist into two for no reason.&lt;/p&gt;

&lt;p&gt;A better solution for people who use playlist as their primary queuing tool would be to have an extra ‘insert into playlist after currently played track” command for cmus-remote. Unfortunately, you’d struggle to find it in almost all music players out there and it’s a very handy feature that would completely remove any need to use queue view for most playlist users.&lt;/p&gt;

&lt;p&gt;The version 2.7.0, which I installed from official repository, is missing an ability to set the default view on program startup. As a playlist user, I have to manually focus the player and press ‘3’ on each system startup to switch from an empty library window to playlist view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cmus-music-player-review/cmus2.png&quot; alt=&quot;CMUS playlist view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An auto-detect feature would be nice as well - if playlist is populated, but library is empty, start with playlist view. If both are empty, but queue contains tracks, focus queue view on startup.&lt;/p&gt;

&lt;p&gt;An auto-switch to view when adding to it would also solve this problem, but is missing too. (edit: in version 2.8.0, there is a new cmus command ‘start_view’, which probably solves the problem)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;speed&quot;&gt;Speed&lt;/h2&gt;

&lt;p&gt;One of the reasons why someone might want to switch to a terminal-based application is speed. Perhaps the user has a very old laptop and wants to make it usable, but the modern bulky applications slow it down too much.&lt;/p&gt;

&lt;p&gt;With music players for people with large music libraries on their hard drives, this is very relevant. Many programs perform well with single playlists and up-to-medium-size libraries, but once the going gets tough, they can start forever and crush often, searching is extremely slow etc.&lt;/p&gt;

&lt;p&gt;A program that is displayed in a terminal emulator window does not necessarily have to be fast (Kakoune being a good example), but most of the time switching to a text interface helps to increase system performance on old computers.&lt;/p&gt;

&lt;p&gt;Here, CMUS delivers. It can handle ridiculously large playlists with ease. Searching works like a breeze, too. If performance is your primary concern, switching to CMUS is definitely worth considering.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;key-bindings&quot;&gt;Key bindings&lt;/h2&gt;

&lt;p&gt;Just like so many other terminal applications, CMUS is somewhat inspired by VIM when it comes to navigation. You can move up and downwith home row keys, quit the program with ‘:q’.&lt;/p&gt;

&lt;p&gt;It is possible to move selected track up or down, switch views, increase/decrease volume, pause/unpause, control playback, mark tracks for operations, execute shell commands and more.&lt;/p&gt;

&lt;p&gt;Together with options, keybindings reside in a config file. Conveniently, this file is editable from inside the program as one of views. You can reach it by pressing ‘7’. Lines are highlighted same as tracks are in other views. We roll down or up to reach the line we want to edit and press enter. A colon followed by the command to change set to current value is displayed at the bottom, enabling us to edit.&lt;/p&gt;

&lt;p&gt;The operation needs to be finished by pressing enter. That means if we screw up, we have to correct, because whatever we accept with enter will stay in config.&lt;/p&gt;

&lt;p&gt;The program checks for validity of input only for options. If it gets the value that doesn’t exist, it reverts to last correct setting. If we edit a boolean field and we insert non-bolean value, whatever that is, it will display an error and then set the option’s value to false, since we just fed it something that is not allowed, which boolean translates to false. It doesn’t matter if it was true or false before.&lt;/p&gt;

&lt;p&gt;When binding keys to commands, there is no check. Any gibberish will be accepted and the error will show only after pressing the bound key.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;string-formatting&quot;&gt;String formatting&lt;/h2&gt;

&lt;p&gt;CMUS offers surprising flexibility in what is displayed in each field in each view (and in program title, which is very important for some applications).&lt;/p&gt;

&lt;p&gt;It gives access to many tag variables and lets the user format them in any way he sees fit. Here, the program is as good as they come. You’d struggle to find a music player that gives you more freedom to shape the way tag data is displayed.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;tag-viewingediting&quot;&gt;Tag viewing/editing&lt;/h2&gt;

&lt;p&gt;And yet, it doesn’t have an option to display full tag, even just for mp3 files.&lt;/p&gt;

&lt;p&gt;Tag-editing duties are usually split between two programs: tag editor for bulk operations and music player for single corrections. I see a misspelled artist name in player window, I edit this file to make a quick correction in-place.&lt;/p&gt;

&lt;p&gt;No need to start another terminal session, find the directory and write full command pointing to a file just to remove one ‘d’ from the end of an artist string.&lt;/p&gt;

&lt;p&gt;You could argue that perhaps the user should leave tag editing duties to his tag editor, but that would be sacrificing convenience for ideology. And it’s a poor argument, the file tag is read and displayed by the program already. Whatever tags are read by the player are then potentially scrobbled. It’s not a separate case.&lt;/p&gt;

&lt;p&gt;But there is no argument for not letting the user view the tag in full. This is really a basic, elemental feature that, just like equaliser, everybody takes for granted in a music player. I doubt many people, when researching a potential change of their music software, checks for the presence of the two, instead taking it for granted.&lt;/p&gt;

&lt;p&gt;Notice that there is a a plugin for editing tags, just like there is for playing a random track. How good it is, I don’t know. Even if they are great, this functionality needs to be integrated into the base software.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;file-browsing&quot;&gt;File browsing&lt;/h2&gt;

&lt;p&gt;Ranger offers too much convenience with file management to delegate some of it to CMUS’ file browser. For me, it’s most convenient to select either single track, multiple tracks, or a folder and then order CMUS to either play or enqueue it (append it to the bottom of current playlist).&lt;/p&gt;

&lt;p&gt;People who operate this way will find file browser useless, and in CMUS that browser is a first-class citizen, by default available by pressing ‘5’ on keyboard. Built browser will always have its limitations compared to a piece of software that is dedicated to just this task. Same for people who navigate their hard drives directly in command line, spoiled for endless customization possibilities.&lt;/p&gt;

&lt;p&gt;Of course, it’s not a problem in any way, as it doesn’t take any unnecessary space and the access to it can be unbound. Whoever likes using it has the option to use it. And some internal file pointer had to be developed anyway.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;issuing-commands-from-outside-cmus&quot;&gt;Issuing commands from outside CMUS&lt;/h2&gt;

&lt;p&gt;Here’s where things get complicated. Every time CMUS starts, a tool named cmus-remote starts as well. It enables us to control playback, volume control and few other things through a socket, from outside the program. This way, we can, for example, configure custom wireless remote to jump between tracks on a playlist without the need to do it on keyboard.&lt;/p&gt;

&lt;p&gt;List of commands is short, and they are stripped in functionality compared to how other players react to particular commands.&lt;/p&gt;

&lt;p&gt;For example, the convention is that using the equivalent of ‘cmus-remote filename.mp3’ (directly giving the program a file to work with) does all these:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;stops current playback&lt;/li&gt;
  &lt;li&gt;clears current playlist&lt;/li&gt;
  &lt;li&gt;adds the pointed file&lt;/li&gt;
  &lt;li&gt;focuses it&lt;/li&gt;
  &lt;li&gt;starts playback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In CMUS, this command just adds it to the bottom of whatever place we point to. (library, playlist or queue). It does not automatically switch, nor start playback. Whether switching 5-step convenient shortcut for a simple enqueue as default is a good choice, it is of course a matter of preferences. But the above is default in most applications for a reason. Most people prefer it that way.&lt;/p&gt;

&lt;p&gt;Most CMUS commands refuse to offer anything extra. ‘–next’ doesn’t switch to next file and begin playback, it just switches to next file. This enables, for example, hopping 5 positions down without hearing the beginning of each track. But it is a very mild inconvenience to which people are used to and comes at a cost in other contexts.&lt;/p&gt;

&lt;p&gt;Good design choice was to make ‘–next’ loop playlist. If we are at the last position in the playlist and give that command, it will start from the beginning. It saves us from traversing the entire playlist, or having a separate command to ‘go to top’.&lt;/p&gt;

&lt;p&gt;I may be scanning an album for a good track I remember from youth. And so I have to issue –next command followed by –play command. Not this track. Another –next, another –play.&lt;/p&gt;

&lt;p&gt;Most ‘nexts’ will most likely be the cases of “don’t want this, play me the next one” and here again we’re taxed with either double keystrokes for that common use case, or writing a separate shortcut/programming a separate button for it, One way, or the other, not good.&lt;/p&gt;

&lt;p&gt;And things get more complicated.&lt;/p&gt;

&lt;p&gt;Currently played track remains being one no matter what. If I pause playback and then clear whatever list I’m using for playback, it is somewhat logical that the paused track remains present and ready to continue playback, despite removing it from a list in which it was played. After all, we just paused it, the pointer sits somewhere between its start and end.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cmus-music-player-review/cmus3.png&quot; alt=&quot;CMUS options view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But when the track is stopped and then the playlist is cleared, I am giving two commands to get rid of it, and yet when I add some new music and order a ‘–play’ command, it doesn’t start playing the first track from the freshly added ones. Instead, it starts the last played one from the beginning!&lt;/p&gt;

&lt;p&gt;We are past it twice, already have a new batch ready for playback, but the player doesn’t want to let go of the past. Hence, instead of ‘cmus-remote –clear –play sometrack.mp3’, the command to produce behavior surely desired by majority of users has a mandatory ‘–next’. We have to use next to point to a first object from the list.&lt;/p&gt;

&lt;p&gt;And since ‘next’ does not imply “and start playback”, if we want it, we have to ensure it. This litters large part of commands we’ll be issuing with ‘–play’, because if entire playlist had finished playing before we added new objects to it, the playback got stopped.&lt;/p&gt;

&lt;p&gt;And in CMUS’ commands logic, if it was playing, switching tracks also continues playing. If it wasn’t, switching will not play. Switching is just switching. It doesn’t concern itself with playback status. Sounds good on paper, in practice it is a big annoyance.&lt;/p&gt;

&lt;p&gt;Look at this command from DeadBeef:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;–play-pause       Start playback if stopped, toggle pause otherwise&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simple conditional logic and very convenient to use. In CMUS, if you say play, it plays if it isn’t already. You say stop, it stops if it’s not stopped already. You can toggle play with pause, but not with stop.&lt;/p&gt;

&lt;p&gt;Another nice DeadBeef command absent in CMUS, particularly interesting for people who like to gamble, is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;–random           Random song in playlist&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;’–seek’ is a single exception from the trend here. ‘seek +10’ will move the playback 10 seconds forward. We can seek backwards, for example with ‘seek -20’ to go twice that length in the opposite direction. A cherry on top is ‘seek 30’ (ie. without an operator in front) that enables us to jump to the 30th second of that track. A rare need for sure, but it’s always nice that we have this possibility.&lt;/p&gt;

&lt;p&gt;Armed with so much flexibility, we can program a remote so that, for example, we have 3 seek options: +3s/-3s, +10s/-10s and +60s/-60s, giving us ingredients for a beefy remote.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;bugs&quot;&gt;Bugs&lt;/h2&gt;

&lt;p&gt;I did not have the opportunity to test CMUS on another machine, but on mine cmus-remote is extremely unreliable. I remotely control behavior of many programs and scripts and no software ever misbehaves, but CMUS does that all the time.&lt;/p&gt;

&lt;p&gt;For some time, I thought there is something in the way program acts that I don’t understand, and so I tested various command combinations either as a single command, or in chain, but in the end everything failed. There was no reliable way to set cmus-remote for player control.&lt;/p&gt;

&lt;p&gt;Ranger’s rifle.conf file contains default applications, so the file manager knows what to run when it encounters a file with a particular extension. We can set it up to do some action in CMUS, by executing ‘cmus-remote –clear –next –play – “$1”’. It clears the playlist, adds the track, switches to it and begins playback… or at least is does so some of the time.&lt;/p&gt;

&lt;p&gt;Other times it adds the file, but does not switch to it and begins playback of the last-played track.&lt;/p&gt;

&lt;p&gt;Because every ‘–next’ has a chance to miss bigger than even more adventurous RPG players might now want to gamble on, we can work around it by issuing the same command 4 times. I did test it 50 times and not once has it failed.&lt;/p&gt;

&lt;p&gt;The problem arises when we are adding more than one file. With one, it’s not a problem since it either switches to that one file or not and ultimately it does. But with more than one, if each next succeeds, the selection travels further and further! Or at least it would, as even one ‘–next’ can move the cursor down by a random number.&lt;/p&gt;

&lt;p&gt;Outside of this behavior, I haven’t encountered any other bugs, but this one alone makes the program completely unusable for me. If you decide to install it, right away go to a folder that contains multiple mp3 files, add them to playlist with ‘cmus-remote *’ and then start ordering ‘cmus-remote –next’ and see if it switches one position down each time.&lt;/p&gt;

&lt;p&gt;Because if it doesn’t, well… good luck using the program ;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;errors&quot;&gt;Errors&lt;/h2&gt;

&lt;p&gt;Errors are being displayed at the penultimate line in terminal window, by default in a dark red color (customizable, as colors of all other types of objects). Unfortunately, they don’t timeout, but stay there until we do anything inside the player window.&lt;/p&gt;

&lt;p&gt;For playlist users, it is an annoyance, since they will be issuing most commands through cmus-remote and not touch terminal window directly.&lt;/p&gt;

&lt;p&gt;You can play 10 albums, clear playlist 10 times, pause and unpause 100 times, and that ancient error will still be there for no reason.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;equalizer&quot;&gt;Equalizer&lt;/h2&gt;

&lt;p&gt;Again, for some reason, it’s missing! For music player, it is an absolute must. My headphones, for example, have a very bad default sound, but when tweaked in an equalizer, they can sound pretty good. Without the ability to play with frequencies, I am forced to use system-wide solutions, which I do not mind, but many people will.&lt;/p&gt;

&lt;p&gt;Some of those solutions are obscure, some are hard to wrap head around, some produce artifacts and choke on sound when processor is running some taxing script.&lt;/p&gt;

&lt;p&gt;PulseEffects is a very nice system set of tools (assuming someone uses PulseAudio) that contains an equalizer. Combining it with CMUS puts the user in a potentially weird space - a terminal-based music player backed by a graphical interface equalizer. Some choose terminal applications for the sake of them being terminal applications, in which case an extra graphical dependency make the switch a no-go.&lt;/p&gt;

&lt;p&gt;For people willing to go this route, there may be a nasty surprise awaiting: PulseEffects fails to start as service on some distributions, requiring always having a graphical interface present to work.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I had high hopes regarding CMUS, to the point of blindly switching to it from a program which, like already mentioned, I was very satisfied with. Unfortunately, its many problems and shortcomings made it impossible to use and after a week I gave up looking for solutions and went back to DeadBeef.&lt;/p&gt;

&lt;p&gt;If on your machine cmus-remote commands work as intended and lack of equalizer and tag viewer/editor are irrelevant to you, then you may still want to try it out. Because outside of those issues, everything works like a charm.&lt;/p&gt;

&lt;p&gt;Unfortunately, for me each one of those is a dealbreaker, and all together make CMUS unarmed for daily use.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2020 11:03:28 +0200</pubDate>
        <link>http://www.chrisbl.com/program/reviews/2020/09/01/cmus-music-player-review.html</link>
        <guid isPermaLink="true">http://www.chrisbl.com/program/reviews/2020/09/01/cmus-music-player-review.html</guid>
        
        
        <category>program</category>
        
        <category>reviews</category>
        
      </item>
    
      <item>
        <title>Setting up single navigation pane in Ranger and why it&#39;s a good idea</title>
        <description>&lt;p&gt;By default, Ranger starts in 3-pane view, which makes it unique, but not very practical. Fortunately, this can be easily changed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to skip past gibberish and straight to solution, click &lt;a href=&quot;#solution&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For many years, I was using Total Commander (best file manager on Windows, or used to be one at least). Maximized, I had classical two-pane design. One day, after buying my first full HD monitor, I opened the program and realized how insane amount of space I am losing by having that second pane. Half of my screen space, to be precise.&lt;/p&gt;

&lt;p&gt;The truth is, in that classical Norton Commander design, half screen is a glorified directory link. Yes, it can be used to compare folders, to get a broader multi-directory view which can help to make sense of things.&lt;/p&gt;

&lt;p&gt;But those are situational. Most of the time, one pane is important, the other just points where to copy, move, from where to copy or move. It is a waste of space.&lt;/p&gt;

&lt;p&gt;If reference is indeed its main purpose, the second pane might as well have a vertical split option and just hold stackable directory paths, with pre-selected modifier+randomly chosen key generated for each one to allow operations to/from these.&lt;/p&gt;

&lt;p&gt;This would be a very good use of space and a real lifesaver when working on projects with complex directory structures. But one link taking half of screen estate?&lt;/p&gt;

&lt;p&gt;This isn’t a problem only if someone is used to have maximized applications and alt+tabs between them. Plenty of that space will be wasted in most programs, but that won’t matter anyway since we decide to focus one thing at the time. For many people, having multiple things at once makes them bleed attention. That’s why distraction-free modes in editors are popular.&lt;/p&gt;

&lt;p&gt;I often do multiple things at once and so I’d rather have them next to each other to be able to compare, rewrite code snippets etc.. Often, I have to run different scripts at once and need to see how they perform. And so every bit of space is important.&lt;/p&gt;

&lt;p&gt;That’s why after switching to Linux few years back, I decided to look for file manager that would just have one pane… end ended up using the one that has three!&lt;/p&gt;

&lt;p&gt;In Ranger’s default view, parent directory, which is always one keypress away, takes one third of space. Another shows sub-directory. How often is that actually useful?&lt;/p&gt;

&lt;p&gt;Some of the most advanced ‘navigators’ I’ve met just use command line for their daily routines. They get zero information even about the current directory when navigating, and yet not only they can function, but they are absurdly fast with their operations.&lt;/p&gt;

&lt;p&gt;Even when we actually need to scan subfolder for presence of file or two, doing a recursive search will be much faster and much less eye-straining. A view of multiple directories at once is a gimmick, something that is there probably because it makes the program stand out from the crowd.&lt;/p&gt;

&lt;p&gt;Since I had absolutely loved Ranger from the get-go, I wasn’t going to let this spoil things. Even if there would be no option to change it, I would probably stick to it still. And fortunately, this is not the case.&lt;/p&gt;

&lt;h1 id=&quot;editing-config-file&quot;&gt;Editing config file&lt;/h1&gt;

&lt;p&gt;Ranger stores configuration in two files: rc.conf (program settings, key bindings) and rifle.conf (file associations). We will be editing the first one.&lt;/p&gt;

&lt;p&gt;You can find it in ~/.config/ranger directory. If it’s not there, paste this command in console and run it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ranger –copy-config=all&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now both files should be there.&lt;/p&gt;

&lt;p&gt;First setting command that interests us is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;set viewmode [mode]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This command takes one of two mode arguments:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;miller: the one I mentioned, showing folder’s parent and children folder on both sides&lt;/li&gt;
  &lt;li&gt;multipane: multiple unrelated directory views next to each other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multipane view puts an equation mark between tabs and panes. If there are no tabs, there is one pane. Every new tab creates a new pane, splitting the available space evenly between all displayed ones.&lt;/p&gt;

&lt;p&gt;Another command compliments it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;set column_ratios 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It takes 0 to 3 arguments. Giving it 4 or more is not considered properly in code. Setting it up in config file and then starting Ranger runs it in a broken state.&lt;/p&gt;

&lt;p&gt;For example, feeding it ‘1,2,1’ will set parent and child directory pane to take 50% of total window width, while the main window in which we navigate will occupy the other 50%. Keep in mind though that as of now, it only works for miller mode.&lt;/p&gt;

&lt;p&gt;It would be convenient to set it to something like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;set column_ratios 5,1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If multipane was set, this command could only accept two argements: first one pointing to relative size of the currently focused tab, the other to all other unfocused ones.&lt;/p&gt;

&lt;p&gt;In miller mode, if we only give it one value, it will just give us one column. And since the one in which we traverse directories is the only one we can’t live without, it is set to be the only one remaining in such case.&lt;/p&gt;

&lt;p&gt;Notice that both setting column_ratios to 0 and not writing any number at the end will also give the same result.&lt;/p&gt;

&lt;p&gt;So, if someone does not ever intend to use tabs, he might just set viewmode to multipane and be done with it, but there’s no need to do that. Today we don’t use it, maybe tomorrow we will ;) Let’s set it to miller route and set column_ratios to 1.&lt;/p&gt;

&lt;p&gt;That’s not all, though. The problem arises when we hover over a file in Ranger. It’s gonna get previewed. Now, half the screen will be occupied by a file each time we encounter a previewable one. Sometimes, that’s useful, bot mostly it’s distracting.&lt;/p&gt;

&lt;p&gt;The solution is to disable file previews:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;set preview_files false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id=&quot;solution&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Check if file rc.conf exists in path: ~/.config/ranger/. If not, paste and execute the following command: ranger –copy-config=all. Now the file should be there.&lt;/li&gt;
  &lt;li&gt;Open it in a text editor&lt;/li&gt;
  &lt;li&gt;Add the following lines inside it:
    &lt;ul&gt;
      &lt;li&gt;set viewmode miller&lt;/li&gt;
      &lt;li&gt;set column_ratios 1&lt;/li&gt;
      &lt;li&gt;set preview_files false&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;but-why-cripple-myself-with-one-pane-when-i-can-have-more&quot;&gt;But why cripple myself with one pane when I can have more?&lt;/h2&gt;

&lt;p&gt;If removing two panes will leave the user with empty space that he does not intend to populate in any way, it might be better to leave default 3 panes on (unless the extra ones are distracting).&lt;/p&gt;

&lt;p&gt;Even for people that don’t get much use from them but are used to having them always on, it can feel like the navigation is now crippled.&lt;/p&gt;

&lt;p&gt;Don’t fret, though. First of all, we have tabs. Switching between them requires single keystroke.&lt;/p&gt;

&lt;p&gt;For copying files/directories, popular approach is to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;change path to the destination directory&lt;/li&gt;
  &lt;li&gt;open a new tab&lt;/li&gt;
  &lt;li&gt;go to some directory&lt;/li&gt;
  &lt;li&gt;select some objects&lt;/li&gt;
  &lt;li&gt;yank/copy them&lt;/li&gt;
  &lt;li&gt;close tab&lt;/li&gt;
  &lt;li&gt;paste&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or reverse it if the file source directory and not destination directory is where we want to do some next thing.&lt;/p&gt;

&lt;p&gt;It takes the same amount of keystrokes to complete as doing that operation while jumping between panes. We just jump between tabs instead of panes. We lose visibility of a reference folder entire time, but require half the program space to complete it.&lt;/p&gt;

&lt;p&gt;For diff purposes, tabbing is great too. We can, for example, check some potentially modified project folder against backup of the same content and switch between them to quickly see if there are some differences in files. As they take turns in occupying same space, it will be easier to notice differences.&lt;/p&gt;

&lt;p&gt;There are better solutions for scenarios like that, but for a quick check, it often is convenient to do it this way.&lt;/p&gt;

&lt;p&gt;Second, we can simplify things further. We move always legally downloaded movies to ‘movie’ folder, legally downloaded mp3 tracks to ‘mp3’ folder etc. Some folders receive high amount of traffic. Almost everyone has a routine.&lt;/p&gt;

&lt;p&gt;Many people who despise file managers and people that use them have bash aliases to folder paths set to allow easy moving, in Ranger it is also very simple to do.&lt;/p&gt;

&lt;p&gt;Ranger adopted one of Vim’s greatest tools - leader keys. No need to press a modifier key (of which there are few) and control its press and release in combination with another key to trigger some operation bound to that particular shortcut. Almost any key can lead and it doesn’t have to be kept pressed.&lt;/p&gt;

&lt;p&gt;And so, we can do this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map mp shell mv %s /mnt/ssd/books/programming&lt;br /&gt;
map mn shell mv %s /mnt/files/img/nakedpersons&lt;br /&gt;
map ma shell mv %s /mnt/files/music/ambient&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We select all books we want to move, then press ‘mp’ and we’re done. No need to go to any folder, open any tabs. A simple two-step operation.&lt;/p&gt;

&lt;p&gt;If having two directories next to each other is a necessity at some point, nothing stops us from using terminal multiplexer. So long as we remember that two separate Ranger instances can’t pass things between them, as Ranger doesn’t start a system deamon that could move that information. Another fantastic file manager, &lt;a href=&quot;https://github.com/jarun/nnn&quot;&gt;nnn&lt;/a&gt;, has that functionality.&lt;/p&gt;

&lt;p&gt;Same can be done with copying, or any other shell command that takes a list of files and does something to them. Such is an amazing flexibility of command line, and in result, of programs that allow sending some input to it for further processing, like Ranger.&lt;/p&gt;

&lt;p&gt;Another fantastic tool that supercharges single-pane navigation is history. In rc.conf, we can set:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map h history_go -1&lt;br /&gt;
map H history_go 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By default, the ‘h’ key is used for navigation in Ranger, as it is in Vim. I am using Colemak keyboard layout, and so for me this key is free, which allows for a nice mnemonic binding. You can set it to any key you have available.&lt;/p&gt;

&lt;p&gt;In a default config Ranger use, coming back in history will mostly go to the directory from which we came, which will be one level higher, or lower in directory structure. Moving forward will do the opposite and will, of course, only work if we already went back in history (like redo in text editors).&lt;/p&gt;

&lt;p&gt;But when we have all sorts of ‘map [key(s)] cd /some/path’ shortcuts and jump between them, those two bindings become way more powerful. And we can bookmark folders on the fly as well (‘m’ saves current folder to bookmarks, tilde and ‘ keys open a list of bookmarked folders).&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2020 13:31:14 +0200</pubDate>
        <link>http://www.chrisbl.com/programs/2020/06/22/setting-up-single-navigation-pane-in-ranger.html</link>
        <guid isPermaLink="true">http://www.chrisbl.com/programs/2020/06/22/setting-up-single-navigation-pane-in-ranger.html</guid>
        
        
        <category>programs</category>
        
      </item>
    
      <item>
        <title>Ranger configuration extras</title>
        <description>&lt;p&gt;Ranger is probably the single most powerful file manager application on any operating system.&lt;/p&gt;

&lt;p&gt;It can be customized to the point of practically being a system wide remote, one tool that can do anything. In this regard, it’s a very neat extension of command line in Linux.&lt;/p&gt;

&lt;p&gt;Because of that, almost every Ranger config file I’ve stumbled upon contains at least an interesting line or two. I’ve used the application for few years already, but feel like there’s a lot that still needs attention. Like, for example, a convenient way of dealing with archives of all sorts, or different file information views, depending on a particular need.&lt;/p&gt;

&lt;p&gt;Below are some of my favorite additions to the rc.conf file. You can usually find it in ~/.config/ranger/ folder. If it’s not there, run this command in command line: ‘ranger –copy-config=all’, which should create it.&lt;/p&gt;

&lt;p&gt;Just paste the quoted lines wherever you see fit inside that file, but keep in mind that some of those commands invoke programs you will have to install.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;keyboard-layout-change&quot;&gt;Keyboard layout change&lt;/h2&gt;

&lt;p&gt;Using alternative keyboard layouts can be very painful for that person’s friends and family. If they sometimes need to operate on this person’s machine, after each session they might hate that person a little bit more.&lt;/p&gt;

&lt;p&gt;Dvorak and Colemak are the unsung heroes of filesystem encryption, making all attempts to search Youtube, finding something out on Google etc. fruitless, unless someone’s brain knows the layout. Even with keycaps being changed accordingly.&lt;/p&gt;

&lt;p&gt;In order to help those poor people, we can set up easy keyboard layout change to and from basic qwerty US layout to any we want. For that, we need to install setxkbmap with our package manager. For Ubuntu users, the command to paste in command line is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install setxkbmap&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, insert these two lines to rc.conf:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map Ku shell setxkbmap -variant ,us&lt;br /&gt;
map Kc shell setxkbmap -variant colemak&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‘Ku’ and “Kc’ are my key combinations. You can set them to whatever you have unmapped. Then you need to restart Ranger and whenever you want to change the layout, you just use those key combinations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;mp3-file-tag-preview&quot;&gt;MP3 file tag preview&lt;/h2&gt;

&lt;p&gt;Sometimes, it is convenient to check the content of an mp3 tag. For example, a track we have on hard drive might just have artist and title in its filename, but we want to quickly check from which album it is, or which year it was released.&lt;/p&gt;

&lt;p&gt;Opening a browser for a Rate Your Music/Discogs/etc. check might take longer than getting to our music directory, quickly locating that file and… pressing a key to see its tag contents.&lt;/p&gt;

&lt;p&gt;For that, we’re going to need a CLI tag viewer. I highly recommend eyeD3, available both as a CLI app and importable Python library. So, first in command line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt install eyed3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And in Ranger config file:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map T shell clear; eyeD3 %s; read -p “———-press ENTER to continue———–”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are making a 3-step operation here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;clear terminal window, so that tag information can be the only thing displayed, so we don’t have to strain our eyes looking for it&lt;/li&gt;
  &lt;li&gt;pass selected file(s) to eyeD3 for tag preview&lt;/li&gt;
  &lt;li&gt;using read to display some information&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need step 3, read with -p option (prompt). It waits for user input, enabling us to view the tag before coming back to Ranger.&lt;/p&gt;

&lt;p&gt;Otherwise, we’d have to quit Ranger, display tag and have to start it again manually. Without the ‘-p’ option, Ranger would display tag information and then instantly come back, requiring photographic memory coupled with Spiderman instincts to pick up the information we want. It would only be visible for fracture of a second.&lt;/p&gt;

&lt;p&gt;Notice that you can select multiple desired files, just like you normally mark them for operations in Ranger, and for each of them, tag information will be displayed in vertical order. Very handy.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;mp3-player-playback-control&quot;&gt;MP3 player playback control&lt;/h2&gt;

&lt;p&gt;In my opinion, it is much better to have a system-wide playback control shortcuts, than narrowing it down to a specific application. This way, we can change tracks while the monitor is off and never have to worry about what’s focused. Even if we spend large majority of time in our file manager.&lt;/p&gt;

&lt;p&gt;If you don’t have any free system-wide available key combinations for that porpuse, you can let Ranger do the ordering. So long as your music player accepts playback commands from terminal session (if it doesn’t, you need to change your music player).&lt;/p&gt;

&lt;p&gt;Ordering player to start playback of hovered/selected file(s) is as simple as setting up your default music application in Ranger’s rifle.conf file. But maybe we want to enqueue instead of play?&lt;/p&gt;

&lt;p&gt;In this case, we have to check what playback control commands particular player accepts. Most applications will give such information when starting it up from terminal window with ‘ -h’ (short for ‘help’) added at the end.&lt;/p&gt;

&lt;p&gt;In DeadBeef, enqueing is done with ‘–queue’ parameter. Entire command looks like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map de chain shell deadbeef –queue %s; mark_files all=True val=False&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You need to replace it with your player of choice and its equivalent command (which might very well be exactly the same).&lt;/p&gt;

&lt;p&gt;The second part is also important. Ranger has a nasty habit of leaving selection after operation and no way to change that behavior, as far as I know. There is an option to drop all selections when leaving folder, but it doesn’t work on my computer.&lt;/p&gt;

&lt;p&gt;It is not a problem, because we can slap the above ‘mark_files’ command whenever we want to unselect after an operation and skip it whenever we don’t, giving us full control.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;starting-twitch-streams&quot;&gt;Starting Twitch streams&lt;/h2&gt;

&lt;p&gt;Youtube-dl is a great tool to download Youtube videos, but it can also be used in concert with MPV to play its videos, or playback Twitch streams.&lt;/p&gt;

&lt;p&gt;For that, we of course first need to both have MPV and youtube-dl installed. Then, it’s as simple as adding one line for each stream to rc.conf:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map qan shell killall mpv; mpv https://www.twitch.tv/boxerpete &amp;lt;/dev/null &amp;amp;&amp;gt;/dev/null &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First part is optional and it kills all mpv instances. Since I want to play a stream now, first I want to end playback if something is on already, as I’m not gonna watch two things at once.&lt;/p&gt;

&lt;p&gt;Then we start MPV with Twitch streamer url address. The player automatically invokes youtube-dl and begins stream playback.&lt;/p&gt;

&lt;p&gt;In order not to freeze Ranger until stream playback is finished, which could be in 23 hours and 59 minutes in case of a 24-hour stream, we need to order it to start as separate process, hence line ending.&lt;/p&gt;

&lt;p&gt;Or are you like me and sometimes watch beautiful places on webcams while working, to cheat yourself that you’re not sitting inside dark cave until the work is done?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map qge shell mpv https://www.youtube.com/watch?v=yMSc-qqW3To –no-audio –no-resume-playback &amp;lt;/dev/null &amp;amp;&amp;gt;/dev/null &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;open-with&quot;&gt;Open with…&lt;/h2&gt;

&lt;p&gt;Default applications often don’t meet all our requirements for file handling. We might be using one application for default action, but also need another option for marginal cases.&lt;/p&gt;

&lt;p&gt;Take images, for example. For casual users, default action could be to open them in image viewer. Sometimes, we might need to edit them, carve something out and send it to someone? It’s good to prepare for such cases:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map wp shell pinta %s&amp;lt;/dev/null &amp;amp;&amp;gt;/dev/null &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pinta is a simple image editor for Linux. It is an equivalent of the old Paint Shop Pro on Windows, back before Corel bought them.&lt;/p&gt;

&lt;p&gt;For simple modifications like slicing particular areas out of an image, there is no point to start any graphical powerhouse, as we’d waste a lot of time looking at loading screen while the program computes stuff we will not need.&lt;/p&gt;

&lt;p&gt;Maybe I need to open file in an editor I’m not using daily:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map us shell subl %s&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sublime Text spawns separate process by default, so it doesn’t require command ending to make it to.&lt;/p&gt;

&lt;p&gt;Another use is to start program with a specified geometry. I want to start MPV player, but want it on my second 4:3 monitor:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;map uv shell mpv –geometry=1280x1024+1920+0 %s&amp;lt;/dev/null &amp;amp;&amp;gt;/dev/null &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could add ‘–fs’ before sending output to /dev/null to also start the program in full screen, but my experience is that it’s bugged and sometimes fullscreens on first monitor, sometimes on second.&lt;/p&gt;

&lt;p&gt;Omitting it and specifying geometry is successful 100% of the time and there is no practical difference. It can be annoying if someone often click-drags the player window by accident (fullscreen prevents moving window around). But in this case it’s just better to disable, with the exception of someone using mouse and click-dragging MPV window by accident. If that is your problem, just add this line to your mpv.conf:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;no-window-dragging&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 01 Apr 2020 22:43:18 +0200</pubDate>
        <link>http://www.chrisbl.com/programs/2020/04/01/ranger-configuration-extras.html</link>
        <guid isPermaLink="true">http://www.chrisbl.com/programs/2020/04/01/ranger-configuration-extras.html</guid>
        
        
        <category>programs</category>
        
      </item>
    
      <item>
        <title>Writing a local audio scrobbling script in Bash</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;lastfm-vs-local-scrobbling&quot;&gt;Last.fm vs local scrobbling&lt;/h2&gt;
&lt;p&gt;Once merged with Audioscrobbler, Last.fm became the leading tool for tracking music history and probably remains so to this day, despite being considerably less popular now than it used to be.&lt;/p&gt;

&lt;p&gt;One of the reasons why it became so popular was because it added a social dimension to music tracking. We can start a conversation about an interesting track we’ve both discovered recently, or concert which, as it turns out, we both attended.&lt;/p&gt;

&lt;p&gt;But what if someone doesn’t care about all that and just wants to track down history and store it? In that case, there is probably no reason to keep something as precious as lifetime of our musical adventures on a remote server.&lt;/p&gt;

&lt;p&gt;That applies even if the company is trustworthy. And people behind last.fm, both before and after &lt;a href=&quot;https://techcrunch.com/2007/05/30/cbs-acquires-lastfm-for-280m/?guccounter=1&quot;&gt;the CBS takeover&lt;/a&gt;, have not given us any reasons doubt them.&lt;/p&gt;

&lt;p&gt;Anything can happen to a website though. A disgruntled employee on his way out might &lt;a href=&quot;http://www.digitaljournal.com/article/249311&quot;&gt;erase large portion of its data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just to be safe, we might want to download our entire listening history. In case of Last.fm, this isn’t always easy. The service itself used to provide downloading all user data, but for years that option is gone.&lt;/p&gt;

&lt;p&gt;There are other websites which can extract it. But if our history contains hundreds of thousands of items, there is big chance downloading those large files will fail at some point. Fetching data through those kinds of websites also takes a lot of time.&lt;/p&gt;

&lt;p&gt;When our history is out there with no backups, then even if that company has many backups on different servers, we can’t really be 100% sure that our data is safe. It needs to be backed up somehow.&lt;/p&gt;

&lt;p&gt;If downloading last.fm user history fails, the only option left is to write a script that will extract that data from their website, page by page. That can be tens of thousands of pages… and now we have to know web scraping.&lt;/p&gt;

&lt;p&gt;But it can’t just be a script that we run once and are done with it. It needs to check for new scrobbles periodically, so we lose as little data as possible.&lt;/p&gt;

&lt;p&gt;In other words, if we want to continue using a remote scrobbling service, but also want regular and reliable backup plan for our data, we’re in a world of trouble.&lt;/p&gt;

&lt;p&gt;Why not writing our own script and store musical history on our very own disk, right under our noses? Backing it up further from local file for 100% safety is so much simpler and faster, too.&lt;/p&gt;

&lt;p&gt;We won’t need any application that might spy on us, to whom we might one day lose password by accident, or which might stop working at one point due to some peculiar bug.&lt;/p&gt;

&lt;p&gt;And we need it to be able to scrobble, or our listening history comes to a halt until the problem is solved. Do we not listen to anything until we manage to, just to keep historical accuracy? That would be a questionable solution to a problem that we could do without.&lt;/p&gt;

&lt;p&gt;Local script means every time the system is on, scrobbling is on. 100% reliability. Let’s explore other arguments for it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;advantages-of-local-scrobbling&quot;&gt;Advantages of local scrobbling&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;the script is just few lines long, possible to fully understand quickly even for someone who has just started learning Bash&lt;/li&gt;
  &lt;li&gt;once everything is set up, it always works. if problematic strings are properly escaped/removed, nothing will break our script&lt;/li&gt;
  &lt;li&gt;data can be stored in any format we want. in case we change our mind at some point, converting it to another format using regex is very easy&lt;/li&gt;
  &lt;li&gt;with minor modification of this script, we can set up a local SQL server and directly feed it scrobbled data. keep in mind that if you don’t plan to do advanced stuff with that data, choosing database over plain CSV file for storage is overkill&lt;/li&gt;
  &lt;li&gt;we decide which tag fields should be stored&lt;/li&gt;
  &lt;li&gt;deleting unwanted items is as simple and powerful as our editor allows, as opposed to a click-fest if we decide to do it through a website&lt;/li&gt;
  &lt;li&gt;even decade-long logs still won’t take more than dozen megabytes, which by today storage standards is zero&lt;/li&gt;
  &lt;li&gt;we can extract whatever statistical information from it, imagination is the limit (but we have to do the work)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This tutorial uses Bash inside Linux as the environment of choice. We will be issuing system commands, which is always more natural from Unix shell languages than from other programming languages. The latter usually require importing system libraries first and might produce code that is harder to read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For local scrobbling to be an easy ride, you have to use a music player that supports editing its title. Popular standard is for the player to display currently played track’s tag information as the application title. We need to be able to change from which tags we get the information.&lt;/p&gt;

    &lt;p&gt;If you intend to use graphical application and don’t care about library, &lt;a href=&quot;https://deadbeef.sourceforge.io/&quot;&gt;DeadBeef&lt;/a&gt; comes highly recommended. For console interface, &lt;a href=&quot;https://cmus.github.io/&quot;&gt;CMUS&lt;/a&gt; is a popular choice. This tutorial will work with DeadBeef.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You will need to download &lt;strong&gt;wmctrl&lt;/strong&gt;. Your system package manager most likely has it. It is a small, very fast and very useful tool. I recommend getting to know it as it makes many interesting system scripts possible.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;configuring-deadbeef&quot;&gt;Configuring DeadBeef&lt;/h2&gt;
&lt;p&gt;Go to &lt;strong&gt;Edit&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Preferences&lt;/strong&gt; -&amp;gt; &lt;strong&gt;GUI/MISC&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Player&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the ‘&lt;em&gt;Titlebar text while playing&lt;/em&gt;’ field, replace the current string with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;deadbeef: %artist%;%album%;%title%;%year%;%length%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…or any tags you want, in any order. The beginning part is important, we will be identifying program title by a string ‘deadbeef: ‘, so it has to be there.&lt;/p&gt;

&lt;p&gt;You might want to change it to something more unique to never match that title elsewhere (in case you one day visit a website whose title contains ‘deadbeef: ‘ or a similar situation). If you decide to do so, remember to change it to something identical both in DeadBeef options and in line 4 of the script.&lt;/p&gt;

&lt;p&gt;In the ‘&lt;em&gt;Titlebar text while stopped&lt;/em&gt;’ field, replace the current string with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;deadbeef - not playing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is important that there is no ‘*deadbeef: ‘ string here, as different string is a signal that deadbeef is not playing. If we’d add colon here, the script would assume that deadbeef is playing and that ‘- not playing’ is another currently playing track that needs to be added to a scrobbling history file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;csv-as-our-storage-format-of-choice&quot;&gt;CSV as our storage format of choice&lt;/h2&gt;

&lt;p&gt;Semicolons between tags decrease readability, but we are gonna make our log a CSV file, with semicolons instead of commas.&lt;/p&gt;

&lt;p&gt;And so to make our life easier, DeadBeef will be displaying tag information already formatted for CSV file write. CSV file is like a table, with each line being a row and cell items are divided by a comma, semicolon or any other symbol you choose. Tab is another good option.&lt;/p&gt;

&lt;p&gt;We no longer have COMMA separated values, so it’s not a CSV file anymore, strictly speaking. But the idea is the same, so we keep calling it that anyway.&lt;/p&gt;

&lt;p&gt;Even though it doesn’t look pretty (compare it to YAML, for example), we keep using it for practical reasons. If we ever intend to analyze that data in any way (most popular artist this year, most listened to track ever…), parsing a CSV file is kid’s play.&lt;/p&gt;

&lt;p&gt;Yaml is the best option for readability, but files can be considerably larger because of it and it can be a nightmare to parse. CSV is simple and reliable.&lt;/p&gt;

&lt;p&gt;Because the format is very popular, many frameworks, libraries and other tools have CSV importing/exporting built-in. We won’t have to do any additional work to prepare the data ahead of our tasks. With YAML, we might as well need to hire an assistant parser ;)&lt;/p&gt;

&lt;p&gt;Remember that the character you chose as field separator can’t be present inside your music tags, or it will mess up your data. It’s good when all music tracks get pre-cleaned before being played for the first time. Check article list on this blog, I will write such a script and post it here sooner or later.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;breaking-apart-the-script&quot;&gt;Breaking apart the script&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;last_title_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/scrobble-last.log&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We start by pointing to Bash interpreter, which usually is in the main bin folder. Then, we create a variable which points to a string representing the path to a file which stores the last scrobbled track.&lt;/p&gt;

&lt;p&gt;We could store the last scrobbled track in memory to avoid disk writes. An average of one disk write every 3 or 4 minutes is not exactly the case of machine cruelty and it won’t have any impact on our hard disk lifespan. And if we write to disk, we don’t have to be afraid of losing data on reboot etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a common programming use for an infinite loop. The idea is to start the script on system startup and repeat some sequence of events forever. For that, we need a loop that under no condition ever breaks.&lt;/p&gt;

&lt;p&gt;‘While’ checks for something being true (or truthy, depending on the language). True is always  true, it’s not gonna change at iteration 131. It guarantees the loop will run until terminated from outside (like &lt;em&gt;kill&lt;/em&gt; command, or system reboot).&lt;/p&gt;

&lt;p&gt;Entire sequence of code will be executed line after line, after which next loop iteration will start, ie. it will begin to execute entire sequence again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;curr_title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wmctrl &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Po&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(?&amp;lt;=deadbeef: ).+&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;prev_title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last_title_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logic of the script is that every 5 seconds, we will check current track against previously played one and only if it’s different, we will put it in log.&lt;/p&gt;

&lt;p&gt;Wmctrl has a useful ‘-l’ argument, which lists all graphical windows currently open on all our monitors. It also states on which monitor each window currently resides and, what interests us here, program title.&lt;/p&gt;

&lt;p&gt;We wrap the system command in ‘&lt;em&gt;$()&lt;/em&gt;’ and make variable point to its output. The command first lists all open windows, and then pipes it through grep. For the latter, we specify two options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;‘&lt;em&gt;-P&lt;/em&gt;’, which changes default regex engine to Perl’s (best Regex version). it needs to be specified because the default grep regex engine does not support lookbehind&lt;/li&gt;
  &lt;li&gt;‘&lt;em&gt;-o&lt;/em&gt;’, which only returns what regex matches, and not a whole line in which regex match was found&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A variable representing previously played track is set by printing it through &lt;em&gt;*head&lt;/em&gt; with the ‘-n1’ option. On default, head prints the first ten lines of a specified file. We just want one line, the first one, which the ‘n’ option secures.&lt;/p&gt;

&lt;p&gt;We can’t just &lt;strong&gt;cat&lt;/strong&gt; the whole file, because then we’d also get the newline. We don’t want it, so we have to remove it one way or the other.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prev_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After defining all the necessary variables, we get to the heart of our script. First, we check if the music player is playing anything, or the second test would produce an error and break our script if it doesn’t.&lt;/p&gt;

&lt;p&gt;Then, we check if the currently played track is different from the last played one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$last_title_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to replace the last played one with the currently played one inside our scrobble-last.log file. We need to compare future playback against this track from now on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date +&lt;span class=&quot;s1&quot;&gt;&#39;%Y.%m.%d;%H:%M&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/path/to/scrobbles.csv&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we’re constructing the final string and appending it to our main scrobbling file. The desired format features date and time in front, either together in ISO 8601 format, or split by another separator &lt;em&gt;(in our case, a semicolon)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is convenient to keep it separate from date, as we might want to also extract hourly statistics. Having them separate saves us from additional step of extracting it from another field when we need it.&lt;/p&gt;

&lt;p&gt;Our file entries are added chronologically, so it’s good to have time of addition in front. And since date and time are always same width, readability does not suffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	sleep 5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before closing the if statement content and the loop, we order the script to sleep for 5 seconds. You can do so every any other time interval. Linux’s sleep program is very flexible (unlike Python’s, for example), not only allowing seconds as a unit. The smallest unit (in theory) and the program default is seconds, though.&lt;/p&gt;

&lt;p&gt;We can even use floats, so you can order sleeping for .1 to get ten checks every second, giving a 50 times greater resolution than the default, and producing near-instant additions to the log. It is a trivial task for the processor, so you don’t have to worry about performance.&lt;/p&gt;

&lt;p&gt;For me, 5 seconds is precise enough. It’s gonna check everything anyway (unless all you listen to is grindcore), and few second delays are completely irrelevant for statistical operations I am doing on the scrobbled data.&lt;/p&gt;

&lt;p&gt;One case when setting lower time interval is important is when we need statistics of unfinished tracks. Then, we’d have to calculate timedelta between beginning of playback of one file and beginning of playback of the following one to see if it’s shorter than track length and by how far.&lt;/p&gt;

&lt;p&gt;If we need that ‘how far’, few seconds will seriously screw up the data and so sleep needs a very low value.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;final-script&quot;&gt;Final script&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;last_title_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/path/to/scrobble-last.log&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;curr_title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wmctrl &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Po&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(?&amp;lt;=deadbeef: ).+&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;prev_title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last_title_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prev_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
		&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$last_title_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date +&lt;span class=&quot;s1&quot;&gt;&#39;%Y.%m.%d;%H:%M&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curr_title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/path/to/scrobbles.csv&#39;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;fi
	&lt;/span&gt;sleep 5
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;making-the-script-run-on-system-startup&quot;&gt;Making the script run on system startup&lt;/h2&gt;

&lt;p&gt;We want the script to always run whenever the system is up.&lt;/p&gt;

&lt;p&gt;The alternative is to either remember to manually start it before playback (stupid), or have the script monitor music player for beginning of playback and turn itself on when the playback is on and turn off when the playback is off (pointless).&lt;/p&gt;

&lt;p&gt;While technically the second solution is cleaner, it has no practical meaning, while introducing a mechanism that perhaps could get broken one day if we don’t prepare for some rare exotic scenario bound to happen sooner or later.&lt;/p&gt;

&lt;p&gt;In any modern operating system, every second many things are happening in the background. Addition of another tool performing such trivial task is irrelevant.&lt;/p&gt;

&lt;p&gt;After we have our script in a file, we need to make it run on system startup. There are many options for that. Below are two popular ones.&lt;/p&gt;

&lt;h3 id=&quot;put-it-in-crontab&quot;&gt;Put it in crontab&lt;/h3&gt;

&lt;p&gt;Crontab file contains instructions on running applications. Every Linux user profile has its crontab file. We can put precise time when we want to run something, specify days of the week when we need it run, run it every x minutes and many more.&lt;/p&gt;

&lt;p&gt;It is a very flexible tool and it needs to be, since Linux is mainly used for servers, and servers often need complex task schedules.&lt;/p&gt;

&lt;p&gt;One special use in crontab is to replace all the normal specifications of when it needs to be run with &lt;em&gt;@reboot&lt;/em&gt;, so the command is executed on system startup and only then. In the case of our scrobbler.sh file, the entry looks like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;@reboot	/path/to/scrobbler.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That line needs to be added to the user crontab file, which can be edited by writing this command in console:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;‘&lt;em&gt;e&lt;/em&gt;’ is short for ‘&lt;em&gt;edit&lt;/em&gt;’. It doesn’t matter which line you put it in.&lt;/p&gt;

&lt;h3 id=&quot;order-window-manager-to-run-it-on-startup&quot;&gt;Order window manager to run it on startup&lt;/h3&gt;

&lt;p&gt;Window managers often have configuration files which are loaded on system startup. In those files, we can order starting up of applications, so they run on startup as well. This way, we ensure that every time we load window manager, the script gets loaded as well, which is what we want.&lt;/p&gt;

&lt;p&gt;I am using &lt;strong&gt;i3&lt;/strong&gt;, in which I need to edit ~/.config/i3/config file and add this line to it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;exec /path/to/scrobbler.sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;One feature this script is lacking is an ability to detect same track being played few times in a row.&lt;/p&gt;

&lt;p&gt;The way the script is designed, if we listen to the same track for half a day, the script does not see track change, and so it cannot see that we got a bit carried away with it.&lt;/p&gt;

&lt;p&gt;This is one area in which scrobbler applications perform better. Remember that we’re comparing it to 11 lines of code ;)&lt;/p&gt;

&lt;p&gt;Since I wanted to write a basic scrobbler, I did not implement checking for track repeats. I’m sure there are many ways to solve this problem, but I can’t find one that’s good enough and short enough to implement into the script while still keeping it short and simple.&lt;/p&gt;

&lt;p&gt;One is to convert track length to seconds (so we get single integer for comparison) and then monitor if the playback of that track spans for more than its length. The refresh in which it does for the first time, we append the log with another instance of that track.&lt;/p&gt;

&lt;p&gt;That solution is not perfect though. If we pause the track mid-way for 2 hours and then resume it, it will add second line to log even though we are listening to it once.&lt;/p&gt;

&lt;p&gt;Another thing is that services like last.fm have many algorithms for filling out the missing data. If tags contain misspelt information, they check against their databases to try and find a guaranteed match to correct it. We don’t have to do this, it gets done automatically.&lt;/p&gt;

&lt;p&gt;With our solution, everything that is inside tags is logged directly, and so it is our responsibility to make sure the data is correct. It’s more work, but it gives better results than an automated guessing game.&lt;/p&gt;

&lt;p&gt;Yet another problem is logging playback from services like Spotify. Popular services of this kind support scrobbling to last.fm. It will get logged the same as if we’d be listening through the music player.&lt;/p&gt;

&lt;p&gt;You can try to go around it, but it will most likely be a messy road. You can set up a script to monitor music streaming service applications and extract data from their titles instead, but maybe the customization options for title display are not built into those applications and we’ll miss some of the data that we want, like track length.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Feb 2020 21:43:18 +0100</pubDate>
        <link>http://www.chrisbl.com/scripts/2020/02/20/writing-a-local-audio-scrobbling-script-in-bash.html</link>
        <guid isPermaLink="true">http://www.chrisbl.com/scripts/2020/02/20/writing-a-local-audio-scrobbling-script-in-bash.html</guid>
        
        
        <category>scripts</category>
        
      </item>
    
      <item>
        <title>Using commands to resize programs in Linux</title>
        <description>&lt;p&gt;Neither Linux nor Windows remember window size and position for applications.&lt;/p&gt;

&lt;p&gt;Minority of programs remember dimensions and position on exit. For the rest of them, a troll is sitting inside PC case and rolls his dice. “Where should we put it this time?”.&lt;/p&gt;

&lt;p&gt;It is sad that something so basic and important is still largely ignored by people behind both operating systems and we have to look for separate tools to try and fix that while much less important issues take precedence.&lt;/p&gt;

&lt;p&gt;In this article, we will explore options to modify window sizes and positions through commands and scripts.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;geometry&quot;&gt;Geometry&lt;/h2&gt;

&lt;p&gt;Ocassionaly, Linux applications support setting geometry, which more than solves this problem, but only for those apps.&lt;/p&gt;

&lt;p&gt;Geometry is a special string containing four numbers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;window width&lt;/li&gt;
  &lt;li&gt;window height&lt;/li&gt;
  &lt;li&gt;starting position in pixels from the left screen border&lt;/li&gt;
  &lt;li&gt;starting position in pixels from the top screen border&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can append this special geometry string to some programs when we start them from command line. This functionality has to be written by the developer into the app.&lt;/p&gt;

&lt;p&gt;There are also programs which can set any graphical window’s parameters through special commands. The below article explains both in detail.&lt;/p&gt;

&lt;p&gt;First two parameters decide how big the window is vertically and horizontally, the other two decide where the top-left corner of the application is on our monitor. Here’s an example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1200x600+20+0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assuming we have a 1080p monitor, it’s exact resolution is 1920x1080. Here, the program window is being set to 1200px wide and 600px high. It will occupy a considerable amount of space on our monitor.&lt;/p&gt;

&lt;p&gt;The third number indicates that we want our program to be 20px from the left border of our monitor. The last one means it will start at pixel 0 from the top. In other words, there will be no space between our program’s top border and monitor’s top border.&lt;/p&gt;

&lt;p&gt;Notice two pluses at the end. We can either put ‘+’ or ‘-‘ in front of each of the last two numbers. Plus means ‘pixels from the left edge of the screen’, minus means ‘pixels from the right edge of the screen’.&lt;/p&gt;

&lt;p&gt;Sometimes it is more convenient to align our windows from the right side, so it is great that we have this flexibility.&lt;/p&gt;

&lt;p&gt;Of course, pixels then align towards the left side, just like when we get an order to move our piece of furniture 20cm from the right wall, we move it to the left instead of trying to demolish the wall and put it inside ;)&lt;/p&gt;

&lt;p&gt;Without the option to align from the right side with minuses, if we’d want to set it 20 pixels from the right, we’d have to calculate each time: current monitor resolution - (window width + 20px). It would be very obnoxious to do it.&lt;/p&gt;

&lt;p&gt;Not all window managers on Linux support geometry, so make sure that the one in your distribution does before starting to tinker with it. Fortunately, all the popular ones (and many less popular ones) do, so it is likely that yours does to.&lt;/p&gt;

&lt;p&gt;Another thing to consider is that some window managers have different window ‘states’. For example, in i3 windows can be either floating or tiling. Geometry only works for floating windows. But if you’re using a tiling window manager, you most likely do that on purpose, and so already know about that distinction.&lt;/p&gt;

&lt;p&gt;Like mentioned at the beginning of this article, some programs support setting it on program startup. In those cases, the magic formula almost always looks like in this shell command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mpv &lt;span class=&quot;nt&quot;&gt;--geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1280x1024+1920+0 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is super useful for multi-monitor setups. Sometimes, we want to start the player on monitor one. Tutorials, we might want to watch on monitor 2, a TV show on our TV, which is set up as monitor 3.&lt;/p&gt;

&lt;p&gt;We can have different commands to start the same player in these different contexts, which is much more powerful than system-wide memory of last known window state (which nevertheless needs to be implemented).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;getting-window-geometry&quot;&gt;Getting window geometry&lt;/h2&gt;

&lt;p&gt;Finding out exact position and dimensions of our window does not require print-screening entire desktop and then probing it in an image editor.&lt;/p&gt;

&lt;p&gt;It’s very simple. We just resize the window to our liking, position it where we want on our screen and run a command to find out its dimensions.&lt;/p&gt;

&lt;p&gt;For that, a program called &lt;strong&gt;xwininfo&lt;/strong&gt; is needed. It has many more uses than just geometry, but since right now it is all we need, we enter this command into our console:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xwininfo | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;geometry&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Right after executing it, terminal window will freeze and our cursor will most likely change to a plus sign. All you have to do now is click on the window whose parameters you want.&lt;/p&gt;

&lt;p&gt;The second half of this command means that its output we will pipe through a grep search. That command will print many lines, but we are only interested in one which contains geometry, so we order grep to only return us lines which contain the word ‘&lt;em&gt;geometry&lt;/em&gt;’.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction-to-wmctrl&quot;&gt;Introduction to wmctrl&lt;/h2&gt;

&lt;p&gt;Many people who work on their computers have a small set of programs that they run each time they start working. For entertainment, often there is another set of programs etc.&lt;/p&gt;

&lt;p&gt;Some applications need to have different window properties during work than during slacking off. For example, a terminal emulator window could be smaller during leisure time to give more screen estate to the internet browser, but larger during work hours when Vim or Kakoune needs to be run inside it.&lt;/p&gt;

&lt;p&gt;Because with Linux sky is the limit, we can create extremely convenient shortcuts to instantly get the desktop design we want.&lt;/p&gt;

&lt;p&gt;The tool that makes it all possible is &lt;strong&gt;wmctrl&lt;/strong&gt;. It is a simple, lightning fast application that looks for specified window on our desktop and gives it various behavior commands, like maximize it, change its geometry, close it and even change its title.&lt;/p&gt;

&lt;p&gt;First, we need to install it with our Linux distro’s package manager of choice. In case of Ubuntu/Mint etc., the command is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install wmctrl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s start by changing geometry of a single window. We’re gonna need to give wmctrl some identification, so it knows which window we want to tinker with. Previously used &lt;em&gt;xwininfo&lt;/em&gt; command can be used here as well.&lt;/p&gt;

&lt;p&gt;Write this in your console window:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xwininfo | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Window id&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Po&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;(?&amp;lt;=&quot;).+(?=&quot;)&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…and then click on the window you want. You should get the window title in your console.&lt;/p&gt;

&lt;p&gt;The command may look complicated if you don’t understand regex and piping, but in reality it’s simple. It filters the output of xwininfo first to just get us the line where the title resides and then extracts it from inside brackets so full title is the only thing we get.&lt;/p&gt;

&lt;p&gt;It is easier and makes things faster to go these extra two piping steps and get us just what we want, plus if need be, we can point a bash variable to it, or save it to a file for future use.&lt;/p&gt;

&lt;p&gt;The full command may not work in some edge cases (like browser with focused tab containing brackets in page title). If it doesn’t for you, just write ‘&lt;em&gt;xwininfo&lt;/em&gt;’ in your console and the title will be inside brackets next to Window id number.&lt;/p&gt;

&lt;p&gt;Write down that title. Now, let’s look at wmctrl syntax for changing window geometry:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; TITLE &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; GEOMETRY&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One last obstacle. Wmctrl does not accept geometry in its standard format. You have to take those four numbers and re-arrange them to fit wmctrl’s standard, which is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GRAVITY,PX_FROM_LEFT,PX_FROM_TOP,WIDTH,HEIGHT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, wmctrl takes another item, here right at the beginning.&lt;/p&gt;

&lt;p&gt;That first number is &lt;em&gt;gravity&lt;/em&gt;, which specifies the alignment, source of reference of the moved window. You most likely don’t need to understand what it is and can always set it to 0. Just remember to put it there. You can safely skip the next section describing how it works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;gravity-details&quot;&gt;Gravity details&lt;/h2&gt;

&lt;p&gt;As you can see, we don’t have pluses and minuses to specify if the window should be moved “to the right from left side of the screen”, or “to the left from the right side of the screen”.&lt;/p&gt;

&lt;p&gt;Instead, we specify that reference point as if the screen would be a compass. We have four cardinal directions (north, south, east, west) and four intercardinal (northeast, northwest…) between them.&lt;/p&gt;

&lt;p&gt;Giving 0 refers to system default, which most likely is north-west. That means we are aligning from the top-left corner of our screen. If we’d give it a gravity of 3 (north-east), we’d be adjusting from the top-right corner, just like when we give minuses in front of numbers when setting geometry.&lt;/p&gt;

&lt;p&gt;Below are codes for all 8 gravity directions. Keep in mind that many window managers do not support this and instead will always secretly adjust to system default, no matter which number we feed it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NorthWest (1), North (2), NorthEast (3), West (4), Center (5), East (6), SouthWest (7), South (8), SouthEast (9) and Static (10)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;wmctrl-traps&quot;&gt;Wmctrl traps&lt;/h2&gt;

&lt;p&gt;Read this part if your wmctrl command does nothing, or if you intend to use it often and want to know some caveats in advance.&lt;/p&gt;

&lt;p&gt;Let’s look at an example of a wmctrl command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sublime Text&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,30,20,800,1080&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The program first generates a list of currently existing windows, finds first title that &lt;em&gt;contains&lt;/em&gt; a string specified within brackets and then sets it to gravity 0, position from left 30px, position from top 20px, window width 800px and window height 1080px.&lt;/p&gt;

&lt;p&gt;Because only the first found item gets adjusted, if we have few windows which are really one program, only one of them will be done and each next command given will still reposition just that one window.&lt;/p&gt;

&lt;p&gt;Another potential issue is that windows can have surprising titles sometimes. Browsers troll the most if we seek inside window title.&lt;/p&gt;

&lt;p&gt;A website we are visiting might have a “Sublime Text registered version cost” title, which could in result make your Firefox have a “Sublime Text registered version cost - Mozilla Firefox” title whenever that particular tab is focused.&lt;/p&gt;

&lt;p&gt;If those 3 conditions were met:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the title we order wmctrl to search for is ‘Sublime Text’&lt;/li&gt;
  &lt;li&gt;the browser is higher in wmctrl’s item search order than Sublime Text (and so would be checked first)&lt;/li&gt;
  &lt;li&gt;the title of the currently focused Firefox tab includes a string ‘Sublime Text’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…then wmctrl would adjust Firefox’s parameters instead of Sublime Text’s.&lt;/p&gt;

&lt;p&gt;There are multiple ways to solve that problem:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;use wmctrl with ‘-x’ to search WM_CLASS instead of title, and that you can find with ‘xprop | grep WM_CLASS’ command (followed by clicking a desired application window, just like with xwininfo)&lt;/li&gt;
  &lt;li&gt;use it with the ‘-F’ option to match exact string to the letter, instead of looking for string inside app title (‘Sublime Text’ only matches if the application title is ‘Sublime Text’, it will fail if it is ‘How much does Sublime Text cost - Mozilla Firefox’&lt;/li&gt;
  &lt;li&gt;change conflicting application titles right before searching (for example: ‘wmctrl -r “ - Mozilla Firefox” -N Firefox’ and Sublime Text resizing wmctrl command right after)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are playing title guessing games in your scripts, it is generally a good idea to set application titles to some unique strings that are not likely to get matched (‘:.:BROWSER:.:’, ‘:.:EDITOR:.:’, ‘:.:MP3PLAYER:.:’…) in all applications that give an option to change their titles. Many do, many don’t ;)&lt;/p&gt;

&lt;p&gt;If you can’t, it is good practice to order your resizing commands starting from applications most likely to cause conflicts (ie. those whose names dynamically change based on file opened, website visited etc.), through less likely to do so, with the ones which never will (due to constant unique name) at the bottom. For the last ones, the order doesn’t matter.&lt;/p&gt;

&lt;p&gt;For each that can cause problems, follow the line in which you resize with the line that changes that same program’s name (the mentioned ‘-N’, you can see it below in an example file). This will ensure that the application won’t cause any conflicts.&lt;/p&gt;

&lt;p&gt;Don’t worry if you have to do a lot of title renaming - both repositioning and renaming are trivial operations from your processor’s point of view. You will never see any performance hit, no matter how old your computer is and how many windows you shuffle around.&lt;/p&gt;

&lt;p&gt;Again, many apps offer an option to set a permanent app title and your fixing attempts should start there. Some even allow having different titles when starting them with different profiles. Fantastic terminal emulator called &lt;a href=&quot;https://gnunn1.github.io/tilix-web/&quot;&gt;Tilix&lt;/a&gt; is a good example.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;creating-a-script-file-to-resize-multiple-windows&quot;&gt;Creating a script file to resize multiple windows&lt;/h2&gt;

&lt;p&gt;Each wmctrl command only changes one window, so we need to invoke as many commands as windows we need changed.&lt;/p&gt;

&lt;p&gt;To contain all these instructions, we will use a bash script. Traditionally, in its first line we need to point to the interpreter. Most often, the line you need is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in each line a separate wmctrl command. No need for colon, semicolon or any other sign by line end, just one command in each line.&lt;/p&gt;

&lt;p&gt;The quickest way to write such script is to set up exactly the desktop layout we want. Align everything so it looks perfect. Then, use the mentioned xwininfo commands to get each window’s geometry and title. Write everything down.&lt;/p&gt;

&lt;p&gt;Next, write wmctrl commands. Remember to convert geometry strings (WIDTHxHEIGHT+FROMLEFT+FROMTOP) to format that wmctrl accepts (0,FROMLEFT,FROMTOP,WIDTH,HEIGHT) in each command.&lt;/p&gt;

&lt;p&gt;A complete example winresize.sh file looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; Firefox &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; Firefox &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; Firefox
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Sublime Text&#39;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; qBittorrent &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Google Chrome&#39;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Tor Browser&#39;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; Kid3 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; Pinta &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,394,17,1510,1044
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; LibreOffice &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,394,17,1510,1044
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; QuiteRSS &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; easystroke &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,942,18,961,1042
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; Telegram &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,16,95,359,605
wmctrl &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; deadbeef &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 0,16,720,359,340&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t forget to order them from most conflicting to least conflicting and follow each problematic application with another wmctrl command that renames it. Above, you see me doing it with Firefox.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;making-convenient-shortcuts-for-resizing&quot;&gt;Making convenient shortcuts for resizing&lt;/h2&gt;

&lt;p&gt;The final step is to set up some way to execute our new script at will. Below are main 3 categories of options we have.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create a bash alias for execution of that file (in file &lt;em&gt;~/.bash_aliases&lt;/em&gt; add line: &lt;em&gt;resizer=’/path/to/script.sh’&lt;/em&gt;), source that file (or restart the system if you don’t know how) and then execute it from console by writing &lt;em&gt;‘resizer’&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;set up a system-wide keyboard shortcut for that script (different for every window manager, in i3 it’s as simple as adding this line: bindsym F9 exec /path/to/script.sh)&lt;/li&gt;
  &lt;li&gt;create a mouse gesture to execute a script (easily achieved with easystroke, choosing ‘command’ option and then in command just pasting /full/path/to/our/script.sh&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And voila! We now can reshape all our desktop with something as simple as a single command, pressing of a key, or a mouse gesture. We can create as many of those files and shortcuts as we want.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jan 2020 13:45:20 +0100</pubDate>
        <link>http://www.chrisbl.com/programs/2020/01/14/using-commands-to-resize-programs-in-linux.html</link>
        <guid isPermaLink="true">http://www.chrisbl.com/programs/2020/01/14/using-commands-to-resize-programs-in-linux.html</guid>
        
        
        <category>programs</category>
        
      </item>
    
  </channel>
</rss>
